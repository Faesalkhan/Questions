The program oftern referred as code/script is set of special instructions to tell the computers what task to perform.
They can be written right in a web page’s HTML/developer console and run automatically as the page loads.
Javascript was created to make 'web pages alive'.
the rules for valid instructions and format is called syntax/computer language.
It not only run in the browser but also on server, actually on any device having 'JS Engine'.
Browser has embedded engine called 'Js Virtual Machine'. chrome has V8.

how engine works------------------ ?
The engine (embedded if it’s a browser) reads (“parses”) the script.
Then it converts (“compiles”) the script to machine code (utility called 'compiler' / 'interpreter' do this).
And then the machine code runs, pretty fast.

JS capabilities depends on the environment on which it is running.
e.g : in browser JS is able to 
1) adding new HTML page, modifying it(content and styles).
2) event handling, mouse click, mouse hover, key presses.
3) send requests to remote server. download files, upload files.
4) remember the data on client side (local storage)
5) ask questions to visitors, display messages.

limitation to JS is limited to protect user's safety.
JS on webpage may not read/write/copy/execute any arbitrary file on the hard disc.
(no direct access to Operating System functions).
file is accessed only through <input> or 'dropping' (if provided).
camera, microphone ... are required user's persission to enable them.
(js enabled webpage will not sneakily enable these and send data to another site)
if any webpage is opened, then only this will be open.

uniqueness of JS?
full integration with HTML/CSS.
simple things are done simply.
supported by all major browsers.

JavaScript is the only browser technology that combines these three things.
That said, JavaScript can be used to create servers, mobile applications, etc.

In the world of computer, there is only data. we can create,remove,modify the data.
data is stored into bits(in the form of 0,1).
there is lot / millions of data. a part of it is a value.
value could be of type (string, number, boolean, function).
we just invoke the value to use it. if i want to use a number i'll simply use it by creating it.

part of code that holds the value is called 'expression'. multiple expression make statement. program consist of many statements.

Value and Types ----------------------------
if you go to a phone store and ask employee for cost of a phone, he says '15000'.(actual rupee figure).
if you want to buy 2 of them, you can simply double the price of the phone. (15000*2 = 30000).
if you pick another phone and he says 'its free', by the word 'free' you understand the cost is 0.00.
when you later ask if it includes a charger or not, he would say 'yes' / 'no'.

in similar way we express the values in program. we choose different 'types' for different values.
JS has built in types for each primitive values.
1. when we need to do math operations we need 'number'.
2. print a value on screen we need 'string' (1 or more characters, word, sentence).
3. when you make a decision, you need a boolean (yes/no).

array, function, object are also values types.

Operators ---------------------------
unary operator : operator acting on a single value is unary operator. e.g : 'typeof'.

var a;                 typeof a; // "undefined"
a = "hello world";     typeof a; // "string"
a = 42;                typeof a; // "number"
a = true;              typeof a; // "boolean"
a = null;              typeof a; // "object"--weird !!!!, its a bug(fixing it will cause more)
a = undefined;         typeof a; // "undefined"
a = { b: "c" };        typeof a; // "object"
see how 'a' is holding different type of value. typeof is not 'type of a' but rather 'type of value currently in a'.
"only values have types in JS". variables are just simple container for those values.

binary operator : operator taking 2 values is binary operator.
ternary operator : operator taking 3 values is ternary operator.

Statements--------------------------- :
commands (group of words numbers and operators) that performs the task is called statement.
we can add as many statements as we want in our program, we can separate them by semicolon (;)
e.g : alert('Hello world') shows a alert on webpage.
e.g : a = b * 2 ;

Expression ------------------------- :
statements are made up of one or more expressions. 
An expression is any reference to a variable or value, or set of variable and values combined with operators.
e.g: a = b * 2;
here are 4 expressions,
2 is literal value expression.
b is variable expression, to retrive its current value.
b * 2 is arithmetic expression.
a = b * 2 is assignment expression.

e.g : alert(a);
this is a call expression statement, as entire statement is the function call expression itself.

in most cases, a new line implies a semicolon. but it is not always true.
e.g  : alert(3
+1+
2);

it'll show a alert having 6 in it.
js does not insert semicolon here, as line is ending with + (i.e 'incomplete expression'),
so ; there would be incorrect. (so working fine).

alert("Hello");
[1, 2].forEach(alert);
'Hello' alert will be shown, then '1' & '2' will be shown.

alert("Hello")
[1, 2].forEach(alert);
'Hello' alert will be shown, alert with not proper reading value will be shown.

here is how engine see it,
alert("Hello")[1, 2].forEach(alert);

--nested comments not supported
There may not be /*...*/ inside another /*...*/.

Operators --------------------
assign operator(=) : it is used for assignment, value on the RHS(source value) is calculated and then put it into the variable we specify
on the LHS(target variable).
Math : +,-,*,/.
Increment : ++, -- .
Compound : +=, -=, *=, /=.
Equality : ==, ===, !=, !==.
comparison : <, >, <=, >= 
logical : &&, ||.
object propert access (dot operator) : 'Obj.a' means object value called Obj with a property of the name 'a'.
or we can access like Obj["a"].

Comparing values / Type conversion --------------------------- coersion.
when we want to print a number on console, we need to convert that no. into string first. this conversion is called 'coersion'.
if you need to use them as number to perform the math operations we need to coerce it to number.

let a = '45';
let b = Number(a);
console.log(a);         // '45'
console.log(b);         // 45

this is the example of explicit coersion. (we are converting one type of type value to another one).
when two values compared are not of equal value type, JS implicitly kicks in and covert the value type to mathcing value types.
(implicit coersin).

0, ''/"", null, undefined, false                  ------> falsy
'something', -1, 99.99, array, obj, functions.... ------> truthy

its important to remember that only non-boolean values follow 'truthy/falsy' if its actually coerced to a boolean.

Equality : ==, ===, !=, !==.
== checks for value equality.
=== checks for both value and type.    it's inaccurate.

== checks for value equality with coersion allowed.
=== checks for value equality without coersion allowed ("strict equality").

let a = 42;
let b = "42";
console.log(a == b);        // true
console.log(a===b);         // false

If either value (aka side) in a comparison could be the true or
false value, avoid == and use ===.

If either value in a comparison could be of these specific values
(0, "", or []—empty array), avoid == and use ===.

If you can be certain about the values, and == is safe, use it!.
If you can’t be certain about the values, use ===. It’s that simple.

comparing non-primitive values like functions, objects, arrays (they are actually held by references)
== and === matched if references matches or not, not anything about underlying values.
you might think that two arrays having same content will be == equal, but they are not.

e.g array is coerced to simple strings joining all the values by ','.

let arr = [1, 2, 3];
let arr2 = [1, 2, 3];
let arr3 = "1,2,3";
console.log(arr2== arr3);       // true
console.log(arr == arr2);       // false
console.log(arr == arr3);       // true

Notably, there
are no “strict inequality” operators that would disallow coercion the
same way === “strict equality” does.


Variables ------------------------------(managing the program state)
we need to track a value as it changes over the course of the program, undergoing different operations.
easiest way to do so is to assign a value to a symbolic container, called 'variable'.
JS variable can hold any value of any type without specifying its value type.

let amt = 99.99;
amt = amt * 2;
console.log(amt);                 //99.99 
amt = "$" + String(amt);
console.log(amt) ;                // '199.98'

'const' is used to declare a variable, which will not change its value.

variable name and function name must be a valid identifiers.
An identifier must start with a-z, A-Z, $, or _. It can then contain any
of those characters plus the numerals 0-9.

let a = 4;
let b10 = 43;
let $d = 90;
let _r = 9;
console.log(a + b10 + $d + _r);

same is apply for property name.
let obj = {
    name: "string",
    name10: 12,
    $name: true,
    _name: false,
}

reserved words cannot be used for naming varible,function,property name (if,true,false,delete,for,in...)

Blocks ---------------------------
a block is defined by wrapping one or more statements inside a curly brace pair {...} .

let amt = 99.99;
 {
   amt  = amt * 2;
   console.log(amt);
 }

these types of blocks are not generally seen. rather blocks with loops, if statement is generally seen.
block statement does not need semicolon ; to conclude it.

Conditionals -------------------------
if a store employee tells you if you could purchase screen protection glass to phone, first you need to check your 
current bank balance (current state of your bank balance).
"if the condition is true then, do the following"

let amt  = 99.99;
let bank_bal  = 400;

if(amt < bank_bal){
 console.log('I want to purchase the phone');
}

if statement requires an expression between () either true / false.
if you pass there something that is not a boolean, coersion will occur.

we can also provide the else{} block if our condition is not true.

0, ''/"", null, undefined, false  ------> falsy
'something', -1, 99.99.... ------> truthy

Loops -----------------------
repeating a certain actions untill a certain condition fails. 
or we can say that repeating only while the condition holds.
(a bowler repeats bowling till the over ends or bowler gets unfit).
each time the loop block executes is called 'iteration'.


Functions -------------------
there could be a calculations for final phone purchase. she need to use that again and again for every purchase.
here we could use the function. define it at once and use it again and again just by invoking its name using ().

function printAmt(amount){
  console.log(amount.toFixed(2));
}

let amount = 99.99;
printAmt(amount);                  // 99.99

function formatAmt(amt){
  return '$'+ amt.toFixed(2);
}

var amount = 99.99;
printAmount( amount * 2 );          // "199.98"
amount = formatAmount();
console.log( amount );              // "$99.99"
 
Scope ---------------------------
if you ask for a phone model, she will check the store's inventory. if not found, we have to go to another store.
in programming we have scope/lexical scope.
each function gets its own scope.
it is a collection of varibles as well as rules for how those variables can be accessed by name.
Only code inside that function can access that function’s scoped variables.

function outer() {
  var a = 10;

  function inner() {
    var b = 20;
    console.log(a+b);        // here both 'a' & 'b' can be accessed
  }

  inner();
  console.log(a);            // here only 'a' can be accessed
}
outer();

Lexical scope rules say that code in one scope can access variables of
either that scope or any scope outside of it.
So, code inside the inner() function has access to both variables a
and b, but code only in outer() has access only to a—it cannot
access b because that variable is only inside inner().

Object ----------------------------
Object refers to a compound value where you can set properties that each hold their own values of any type.
let obj = {
 a : "hello there",
 b : 34,
 c : true,
}
obj.a;    // 'hello there'   or   obj["a"]    // 'hello there'
[""] is useful when properties have special characters in it.(?/ *&!...)

Array ----------------------------
Array is an object that holds values of any type in numerically indexed positions.

arr = ['hello', 42, true];
typeof arr;                  // object

they can also have properties, like 'length', arr.length;

use array for numerically positioned values
use object for named properties.

function --------------------------
it is a type of object, like obj it also can have properties (foo.bar in limited cases).

Built-in methods -----------------
let a = "hello there";
let b = 3.14159;

a.toUpperCase();            // "HELLO WORLD"
b.toFixed(4)                // 3.1416


