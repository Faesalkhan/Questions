what is state? -----------------------
state is a dynamic data storage that provides a mechanism for components to manage, keep track of changing data, and trigger re-rendering when it is updated. 
Any update to the data will cause the component to re-render.

Now that you know what state means, you can visualize an application even before building it and have an idea of what data would be stored in different states. This brings us to a point I like to call: â€˜Thinking In Reactâ€™.

when to use useState ? ----------------------------
We can simply get the time (date) from the JS Date function. So we don't need state here.(variable derived from other data)

A modal toggle (to show/hide a modal).
Modal toggle can be true or false, and it's triggered when the user clicks a button. So, in this case we really need state, because we can't derive this kind of information.

Be mindful of this difference â€“ between what can be derived and what depends on the user.

You'll want to use the useState hook when you need to store input from a user.

ðŸ’¡As a rule of thumb, you should only use state to keep this kind of information â€“ that requires the user to input data, or trigger events.

how to use the useState ?--------------------------
suppose we want to make a todo application. we know that it will have task names and we will need a list like table to display all of them or array to store all of them. so we have 'names' , 'listitems' in app, that will change.
so 

const [name, setName] = usState('');
const [items, setItems] = useState([]);

name and items hold the current value of the state variable. While setName and setItems are the functions used to update the value of the state variables.

Our root component should look like this:
import { useState } from "react";
export default function App() {
  	const [items, setItems] = useState([]);
	const [name, setName] = useState(" ")
  return (
    <div>
      <Header />
      <Nav />
      <ListArea />
      <Footer />
    </div>
  );
}

The individual components with their JSX's should look like this

function Header() {
  return <h2>ToDo List</h2>;
}

function Nav() {
  return (
    <>
      <input type="text"/>
      <button>Add</button>
    </>
  );
}

function ListArea() {
  return (
    <>
      <ul>
        <li></li>
      </ul>
    </>
  );
}

function Footer() {
  return (
    <>
      <p>You have items in your cart</p>
    </>
  );
}

this is simple structure of todo app. next we need a simple logic to make state comes in life. where to use state??  for now state are in App component.

types of state --------------------
Global state : It is always declared and located in the root component of your app. These are states that are accessible to every component in the application. (state declared in root component, can be used in 2/more child components)

Local state : Local states refers to the internal data maintained by a component. They are only needed and can be accessed in the component.
Using local state, components can independently change and handle their data. (state declared in a component is a local state for that component)

so we can say that 'name' is local state as we are using it in input.
(so instead of declaring it in App/root component, we can declare it in 'Nav' component)

and 'items' is a global state, 2/more child components will access it.
(so declare it in root level component).

so 

import { useState } from "react";
export default function App() {

//Global state
  const [items, setItems] = useState([]);

//handler function that takes item as a parameter
  function handleAddItems(item) {
  
  //setter function that returns a new array with elements from current state with a new item  
    setItems((items) => [...items, item]);
  }

  return (
    <div>
      <Header />
      <Nav handleAddItems={handleAddItems} /> //passing handleAddItems as props
      <ListArea items={items} /> //passing items as props
      <Footer items={items} />	//passing items as props
    </div>
  );
}
function Header() {
  return <h2>ToDo List</h2>;
}

function Nav({ handleAddItems }) {
  //Local state function
  const [name, setName] = useState("");
  
  //create a handler function that is triggered by Add button
  const handleAddButtonClick = () => {
    //creating a newItem object with name and id properties
    const newItem = { name, id: Date.now() };

    //passing the newItem object into the handler function as an argument
    handleAddItems(newItem);
    // Reset the input field after adding the item
    setName("");
  };
  return (
    <>
      <input
        type="text"
        value={name}
        onChange={(e) => setName(e.target.value)}
      />
      <button onClick={handleAddButtonClick}>Add</button>
    </>
  );
}

//ListArea component recieving items as props from global state

function ListArea({ items }) {
  return (
    <>
      <ul>
      //mapping over items array to get individual item as list items
        {items.map((item) => (
          <li key={item.id}>{item.name}</li>
        ))}
      </ul>
    </>
  );
}

//Footer component recieving items as props from global state

function Footer({ items }) {
  return (
    <>
      {items.length !== 0 ? (
        <p>You have {items.length} items in your cart</p>
      ) : (
        <p>You can start adding items to your list</p>
      )}
    </>
  );
}

The act of positioning a state in the root component so it can be accessed globally in a React application is known as "Lifting State Up"- which was what we did with the items state.